services:
  tracker.dotnet.auth:
    image: ${DOCKER_REGISTRY-}trackerdotnetauth
    ports:
      - "5000:80"
    build:
      context: .
      dockerfile: src/Tracker.Dotnet.Auth/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    volumes:
      - ./logging:/var/log/myservices

  tracker.dotnet.users:
    image: ${DOCKER_REGISTRY-}trackerdotnetusers
    ports:
      - "5011:80"
    build:
      context: .
      dockerfile: src/Tracker.Dotnet.Users/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    volumes:
      - ./logging:/var/log/myservices

  database:
    image: postgres:17.6-alpine3.21
    ports:
      - "54326:5432"
    volumes:
      - database:/var/lib/postgresql/data/
      - ./postgres-init:/docker-entrypoint-initdb.d # creating db for fusionauth
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fusionauth || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  fusionauth:
    image: fusionauth/fusionauth-app:latest
    depends_on:
      database:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://database:5432/fusionauth
      DATABASE_ROOT_USERNAME: postgres
      DATABASE_ROOT_PASSWORD: postgres
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      FUSIONAUTH_APP_KICKSTART_FILE: /usr/local/fusionauth/kickstart/kickstart.json
      FUSIONAUTH_APP_MEMORY: 512M
      FUSIONAUTH_APP_RUNTIME_MODE: development
      FUSIONAUTH_APP_URL: http://fusionauth:9011
      SEARCH_TYPE: database
    healthcheck:
      test: curl --silent --fail http://localhost:9011/api/status -o /dev/null -w "%{http_code}"
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    ports:
      - 9011:9011
  
  loki:
    image: grafana/loki:3.4.3
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:3.4.3-amd64
    volumes:
      - ./logging:/var/log/myservices
      - ./promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:11.6.0
    ports:
      - "3000:3000"

volumes:
  database: {}

