services:
  tracker.dotnet.auth:
    image: ${DOCKER_REGISTRY-}trackerdotnetauth
    ports:
      - "5000:80"
    build:
      context: .
      dockerfile: src/Tracker.Dotnet.Auth/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    volumes:
      - ./logging:/var/log/myservices

  tracker.dotnet.sso.api:
    image: ${DOCKER_REGISTRY-}trackerdotnetsso
    ports:
      - "5001:80"
    build:
      context: .
      dockerfile: src/Tracker.Dotnet.SSO.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    volumes:
      - ./logging:/var/log/myservices
      - api_keys:/keys

  tracker.dotnet.users:
    image: ${DOCKER_REGISTRY-}trackerdotnetusers
    ports:
      - "5002:80"
    build:
      context: .
      dockerfile: src/Tracker.Dotnet.Users/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    volumes:
      - ./logging:/var/log/myservices

  database:
    image: postgres:17.6-alpine3.21
    ports:
      - "54326:5432"
    volumes:
      - database:/var/lib/postgresql/data/
      - ./postgres-init:/docker-entrypoint-initdb.d # creating db for keykloak
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5


  keycloak:
    image: quay.io/keycloak/keycloak:26.3
    depends_on: [database]
    ports:
      - "8443:8443"
    volumes:
      - ./keycloak-init:/opt/keycloak/data/import
      - keycloak-certs:/opt/keycloak/conf
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://database:5432/keycloak   # <-- specified Db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_SCHEMA: public                                      # <-- specified schema (optional)
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/tls.crt
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/tls.key
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: "false"
      #KC_PROXY_HEADERS: xforwarded
    command: ["start", "--import-realm"] # allow http for this project, in production https must be turned on
    mem_limit: 2g
    cpus: 2
    #command: ["start-dev"] # comment previous line and uncomment this after first start

  keycloak-cert-init:
    image: alpine:3.21
    command: >
      sh -c '
        set -eu;
        [ -f /certs/tls.crt ] && [ -f /certs/tls.key ] && exit 0;
        apk add --no-cache openssl >/dev/null;
        echo "Generating self-signed cert for CN=localhost …";
        openssl req -x509 -newkey rsa:2048 -nodes -days 365 \
          -keyout /certs/tls.key -out /certs/tls.crt \
          -subj "/CN=localhost";
        chown 1000:0 /certs/tls.crt /certs/tls.key;
        chmod 640 /certs/tls.crt /certs/tls.key;'
    volumes:
      - keycloak-certs:/certs
  
  loki:
    image: grafana/loki:3.4.3
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:3.4.3-amd64
    volumes:
      - ./logging:/var/log/myservices
      - ./promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:11.6.0
    ports:
      - "3000:3000"

volumes:
  database: {}
  keycloak-certs: {}
  api_keys: {}

